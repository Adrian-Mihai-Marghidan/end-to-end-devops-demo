
# Blue/Green overlay used together with:
#   - infra/compose.base.yml  (db, prometheus, grafana, etc.)
#   - infra/docker-compose.prod.yml (prod-style web image, no bind mounts)
#
# This file:
#  - disables the single 'web' and 'backend' so they don't clash
#  - adds BLUE and GREEN copies of web+backend
#  - isolates each color on its own network so 'web' can proxy to 'backend'
#    via the SAME nginx config (proxy_pass http://backend:3000)
#  - exposes BLUE on :8081 (live) and GREEN on :8082 (pre-switch testing)

services:
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom_data:/prometheus
    ports:
      - "9090:9090"
    # IMPORTANT: depend on the blue/green backends (not the disabled singleton 'backend')
    depends_on:
      backend-blue:
        condition: service_started
      backend-green:
        condition: service_started
    restart: unless-stopped

  # Disable singleton services from base/prod in blue/green mode

  backend:
    profiles: ["_disabled"]
  web:
    profiles: ["_disabled"]

  # =======================
  # BLUE (current live)
  # =======================
  backend-blue:
    container_name: backend-blue
    # Hardcoded GHCR path to your backend image
    image: ghcr.io/adrian-mihai-marghidan/end-to-end-devops-demo/backend:${TAG_BLUE:-latest}
    environment:
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: appuser
      DB_PASSWORD: apppass
      DB_NAME: appdb
    depends_on:
      db:
        condition: service_started
    # Join BLUE network with alias "backend" so web-blue's nginx (proxy_pass http://backend:3000)
    # reaches THIS container; also join default to talk to db/prom/grafana
    networks:
      net-blue:
        aliases: [backend]
      default: {}
    expose:
      - "3000"   # internal only (nginx reaches it); no host port here
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 5s
      timeout: 2s
      retries: 30
    restart: unless-stopped

  web-blue:
    container_name: web-blue
    image: ghcr.io/adrian-mihai-marghidan/end-to-end-devops-demo/web:${TAG_BLUE:-latest}
    depends_on:
      backend-blue:
        condition: service_healthy
    networks:
      net-blue: {}   # must be on same network so 'backend' resolves to backend-blue
      default: {}    # harmless; lets it see shared infra if needed
    ports:
      - "8081:80"    # BLUE public entrypoint (live)
    restart: unless-stopped

  # =======================
  # GREEN (candidate)
  # =======================
  backend-green:
    container_name: backend-green
    image: ghcr.io/adrian-mihai-marghidan/end-to-end-devops-demo/backend:${TAG_GREEN:-latest}
    environment:
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: appuser
      DB_PASSWORD: apppass
      DB_NAME: appdb
    depends_on:
      db:
        condition: service_started
    networks:
      net-green:
        aliases: [backend]   # on GREEN net, 'backend' â†’ backend-green
      default: {}
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 5s
      timeout: 2s
      retries: 30
    restart: unless-stopped

  web-green:
    container_name: web-green
    image: ghcr.io/adrian-mihai-marghidan/end-to-end-devops-demo/web:${TAG_GREEN:-latest}
    depends_on:
      backend-green:
        condition: service_healthy
    networks:
      net-green: {}  # must be on same network so 'backend' resolves to backend-green
      default: {}
    ports:
      - "8082:80"    # GREEN public entrypoint (pre-switch testing)
    restart: unless-stopped

networks:
  net-blue:    # isolates BLUE pair (web-blue <-> backend-blue)
  net-green:   # isolates GREEN pair (web-green <-> backend-green)
# 'default' network exists from base compose; used to reach db/prom/grafana

