version: "3.9"

# This overlay is used together with your base+prod files.
# It disables the single 'web' and 'backend' and introduces two stacks:
#   BLUE:  web-blue + backend-blue  (public on :8081)
#   GREEN: web-green + backend-green (public on :8082)

services:
  # Disable the singletons from base to avoid clashes.
  backend:
    profiles: ["_disabled"]   # don't start this service in blue/green mode
  web:
    profiles: ["_disabled"]

  # -------------------------
  # BLUE (current live)
  # -------------------------
  backend-blue:
    container_name: backend-blue
    # Image built by your Release workflow and pushed to GHCR
    image: ghcr.io/${REPO_LC:-adrian-mihai-marghidan/end-to-end-devops-demo}/backend:${TAG_BLUE:-latest}
    # DB env the same as your normal backend
    environment:
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: appuser
      DB_PASSWORD: apppass
      DB_NAME: appdb
    depends_on:
      db:
        condition: service_started
    networks:
      # Join the BLUE network and answer to the hostname "backend" there.
      net-blue:
        aliases: [backend]
      # Also join default so you can reach db/prometheus/grafana
      default: {}
    expose:
      - "3000"                # only inside Docker; no host port needed for backend
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 5s
      timeout: 2s
      retries: 30
    restart: unless-stopped

  web-blue:
    container_name: web-blue
    image: ghcr.io/${REPO_LC:-adrian-mihai-marghidan/end-to-end-devops-demo}/web:${TAG_BLUE:-latest}
    depends_on:
      backend-blue:
        condition: service_healthy
    networks:
      net-blue: {}            # join BLUE network so 'backend' resolves to backend-blue
      default: {}             # harmless; lets web see other infra if needed
    ports:
      - "8081:80"             # public BLUE entrypoint
    restart: unless-stopped

  # -------------------------
  # GREEN (candidate)
  # -------------------------
  backend-green:
    container_name: backend-green
    image: ghcr.io/${REPO_LC:-adrian-mihai-marghidan/end-to-end-devops-demo}/backend:${TAG_GREEN:-latest}
    environment:
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: appuser
      DB_PASSWORD: apppass
      DB_NAME: appdb
    depends_on:
      db:
        condition: service_started
    networks:
      net-green:
        aliases: [backend]    # on GREEN network, 'backend' points to backend-green
      default: {}
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 5s
      timeout: 2s
      retries: 30
    restart: unless-stopped

  web-green:
    container_name: web-green
    image: ghcr.io/${REPO_LC:-adrian-mihai-marghidan/end-to-end-devops-demo}/web:${TAG_GREEN:-latest}
    depends_on:
      backend-green:
        condition: service_healthy
    networks:
      net-green: {}           # join GREEN network so 'backend' resolves to backend-green
      default: {}
    ports:
      - "8082:80"             # public GREEN entrypoint (for pre-switch testing)
    restart: unless-stopped

networks:
  net-blue:                    # isolates BLUE pair
  net-green:                   # isolates GREEN pair
# 'default' is created automatically and already used by db/prometheus/grafana

